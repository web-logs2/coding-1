#-------------------------------------------------------
# 服务全局配置文件
#-------------------------------------------------------
# 重要说明
# 所有环境均使用此区域的配置。外部资源如数据库连接等可配置为开发
# 环境使用的值，测试环境、预发布环境、线上环境请务必通过Apollo
# 配置中心进行配置，切勿在此文件中定义
#-------------------------------------------------------
# ----- DataSource http://wiki.lianjia.com/display/FWY/ke-infrastructure-datasource  -----
datasource:
  pool:
    default:
      url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: public
      password: public
# ----- Redis http://wiki.lianjia.com/display/FWY/ke-infrastructure-redis -----
redis:
  clients:
    default:
      mode: single
      address: redis://localhost:6379
      password: ~
# ----- Dubbo http://wiki.lianjia.com/display/FWY/ke-infrastructure-dubbo -----
dubbo:
  registry-cache: ${java.io.tmpdir:-/tmp}
  application:
    name: ${spring.application.name}
  protocol:
    name: dubbo
    port: ${server.dubbo-port}
  config-center:
    address: dev-zookeeper.ares.lianjia.com:2181
    namespace: /configcenter
    username: configcenter
    password: dXYkZuvcGB8m
  registries:
    jichu:
      protocol: zookeeper
      address: zk01-test.lianjia.com:2181,zk02-test.lianjia.com:2181,zk03-test.lianjia.com:2181
      group: jichu3/dubbo
      username: jichu
      password: bdcccaccB9
      file: ${dubbo.registry-cache}/${spring.application.name}-jichu.cache
      register: false
# ----- Schedule http://wiki.lianjia.com/display/FWY/ke-infrastructure-schedule -----
lianjia-schedule:
  enabled: false
  env: official_offline_3
  project: ${spring.application.name}
  token: xxxxxxxxxxxxxxxx
# ----- Kafka https://weapons.ke.com/project/1402/wiki/page/9046 -----
kafka:
  config:
    test-groupN:
      properties:
        group-id: ${spring.application.name}
      bootstrap-servers:
        - localhost:9092
      producer:
        retries: 3
        properties:
          topics: topic1
          #interceptor.classes: com.lianjia.hawkeye.client.kafka.HawkKafkaProducerInterceptor,com.ke.iprd.log.aop.KafkaProducerInterceptor
      consumer:
        client-id: consumer1
        group-id:  ${spring.application.name}
        enable-auto-commit: false
        auto-commit-interval-ms: 1000
        properties:
          group-id: ${spring.application.name}
          topics: topic1
          listener-names: listenerFactory1
          #interceptor.classes: com.lianjia.hawkeye.client.kafka.HawkKafkaConsumerInterceptor,com.ke.iprd.log.aop.KafkaConsumerInterceptor
lianjia:
  # ----- Openiam验签鉴权组件(供服务提供方使用) http://weapons.ke.com/project/1402/wiki/page/18528 -----
  openiam:
    client:
      enabled: false
      # 请在服务云上生成开发环境的ak/sk
      access-key-id: <your-access-key-id>
      access-key-secret: <your-access-key-secret>
      target-uri: discovery://openiam
    validation:
      principal-detection-strategy: auto_detect_when_miss
      default-fallback-strategy: accept
      default-validation-strategy: authentication
      # 请在服务云上IAM接入向导处获取开发环境的资源/动作前缀
      resource-prefix: <your-resource-prefix>
      action-prefix: <your-action-prefix>
      http:
        enabled: true
        filter-uri: /api/**
api:
  # ----- api-signature请求加签组件(供服务调用方使用) http://weapons.ke.com/project/1402/wiki/page/18501 -----
  signature:
    feign:
      keychains:
        example: { access-key-id: 123, access-key-secret: 456 }
# ----- 发号器配置 -----
# ----- http://weapons.ke.com/project/1402/wiki/page/8657 -----
seq:
  config:
    appId: 10024
    secretKey: 72b79dcbb7bd7855daec2562a2d91a31
    clientName: ke-boot-test
    prod: false
